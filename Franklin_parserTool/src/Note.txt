1. In ccr.app.TestCFG2.java:
For the Context-Extraction Model:Context Variable [candidate, location, lastLocation, displace, curEstX, curEstY, bPos, cPos, lastPos, actLoc, estLoc, lastLoc, dist]
For the Context-Intensity: Context Variable [candidate]
2.The procedure to do the experiments:
1). Get the failure rate of all faulty versions: ccr.test.TestDriver.java

2). Get the criterion-adequacy test sets:ccr.test.TestSetManager.java
java ccr.test.TestSetManager 2 Context_Intensity 0.7 0.9 20090919 AllPolicies -1 new random L 20

3). Get the detailed fault detection information of adequate test sets: ccr.test.TestingEffectiveManager.java
java ccr.test.TestingEffectiveManager Load_large 20090918 AllPolicies -1 new random H 20

4). Get the fault detection rate of adequate test sets: ccr.test.ResultAnalyzer.java
5). Write the script:ccr.test.ScriptManager.java 

Information:
1. All test cases information is saved in "TestPool.txt" (20091019: it constructs test sets with RA-H, RA-L, RA-R;20091013:it adds activation information; 20091022: it keeps the upper bound of CD improvement;
20091023: it keeps the upper bound of CD improvement based on random algorithm; 20091026: it keeps the relationship between candidate_set_size and testing effectiveness;
20091029: it also keeps the relationship between candidate_set_size and testing effectiveness;
20091030: it keeps the test set which use du-coverage to solve tie cases;
20091031£º   it)
2. Failure rates of all faulty versions is in "failureRate.txt"in /20090312 and /20091005 keeps testing results for all test cases.
3. 20091026: it keeps a significant improvement brought by CD when the candidate test set size is varied.
4. prediction.cs.hku.hk server 2009-10-05: data in this folder is the most important; local 20091019: data in this folder is the most imporant

SQL statements:
1.all generated mutants (4884):
SELECT count(*) FROM mutantmapping m

2.get all application-level mutants(4002):
SELECT * FROM mutantdetail m inner join mutantmapping f WHERE (m.class LIKE '%TestCFG2%') And (m.function LIKE '%application%') And (m.operator = f.genMutant)
get all middleware-level mutants(882):
SELECT * FROM mutantdetail m inner join mutantmapping f WHERE (m.class LIKE '%TestCFG2%') And (m.function NOT LIKE '%application%') And (m.operator = f.genMutant)

3.all golden-version-equivalent mutants (2280):
 SELECT count(*) FROM mutantfailurerate f inner join mutantmapping m where f.mappedMutant = m.mappedMutant and f.failurerate='0.0'
all gloden-version-equivalent application-level mutants(1958):
SELECT count(*) from mutantfailurerate F inner join mutantdetail D, mutantmapping M where F.failureRate='0.0' And F.mappedMutant=M.mappedMutant and M.genMutant=D.operator and D.class LIKE '%TestCFG2%' And D.function like '%application%'
all gloden-version-equivalent middleware-level mutants(322):
SELECT count(*) from mutantfailurerate F inner join mutantdetail D, mutantmapping M where F.failureRate='0.0' And F.mappedMutant=M.mappedMutant and M.genMutant=D.operator and D.class LIKE '%TestCFG2%' And D.function like '%application%'
 
 
4.mutants throw exceptions or run out of time (30 minutes; 4 minutes usually)(670):
SELECT count(*) FROM mutantfailurerate f inner join mutantmapping m where f.mappedMutant = m.mappedMutant and f.failurerate='1.0'
application-level mutants throw exceptions or run out of time (30 minutes; 4 minutes usually)(670):
SELECT count(*) from mutantfailurerate F inner join mutantdetail D, mutantmapping M where F.failureRate='1.0' And F.mappedMutant=M.mappedMutant and M.genMutant=D.operator and D.class LIKE '%TestCFG2%' And D.function like '%application%'
middleware-level mutants throw exceptions or run out of time (30 minutes; 4 minutes usually)(670):
SELECT count(*) from mutantfailurerate F inner join mutantdetail D, mutantmapping M where F.failureRate='1.0' And F.mappedMutant=M.mappedMutant and M.genMutant=D.operator and D.class LIKE '%TestCFG2%' And D.function not like '%application%'

5.other mutants whose failure rates are neither 0.0 nor 1.0(1934):
SELECT f.mappedMutant, f.failureRate FROM mutantfailurerate f inner join mutantmapping m where f.mappedMutant = m.mappedMutant and f.failurerate!='1.0' and f.failurerate!='0.0'

6.failure rate distribution of non-equivalent mutants(1085): 
SELECT m.mappedMutant, m.failureRate FROM mutantfailurerate m inner join nonequivalentmutant f where m.mappedMutant=f.mappedMutant
failure rate distribution of non-equivalent application-level mutants(897):
SELECT F.mappedMutant, F.failureRate from mutantfailurerate F inner join mutantdetail D, mutantmapping M, nonequivalentmutant N where F.mappedMutant=N.mappedMutant and F.mappedMutant=M.mappedMutant and M.genMutant=D.operator and D.class LIKE '%TestCFG2%' And D.function like '%application%'
failure rate distribution of non-equivalent middleware-level mutants(188):
SELECT F.mappedMutant, F.failureRate from mutantfailurerate F inner join mutantdetail D, mutantmapping M, nonequivalentmutant N where F.mappedMutant=N.mappedMutant and F.mappedMutant=M.mappedMutant and M.genMutant=D.operator and D.class LIKE '%TestCFG2%' And D.function Not like '%application%'

8. 