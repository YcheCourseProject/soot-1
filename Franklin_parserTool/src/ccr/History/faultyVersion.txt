TestCFG2_00.java$0$
TestCFG2_01.java$$Line139$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstX = curEstX + ((double) /*2 **/ rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_02.java$$Line184$		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstY = curEstY + ((double) /*2 **/ rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_03.java$$Line207$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstX = curEstX + ((double) /*2 **/ rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_04.java$$Line244$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = curEstX + ((double) /*2 **/ rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$$Line245$		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstY = curEstY + ((double) /*2 **/ rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$2$
TestCFG2_05.java$$Line269$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstY = curEstY + ((double) /*2 **/ rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_06.java$$Line329$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstX = curEstX + ((double) /*2 **/ rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_07.java$$Line366$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = curEstX + ((double) /*2 **/ rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$$Line367$		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstY = curEstY + ((double) /*2 **/ rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$2$
TestCFG2_08.java$$Line427$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = curEstX + ((double) /*2 **/ rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_09.java$$Line452$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstY = curEstY + ((double) /*2 **/ rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_10.java$$Line100$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = curEstX /*+*/- ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$$Line101$		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstY = curEstY /*+*/- ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$2$
TestCFG2_100.java$$Line546$		if (c1 + 1 == c2 && t2 - t1 <= STAY_TIME + 100) { // Adjacent and in stay:		if (c1 + 1 == c2 && t2 - t1 <= STAY_TIME /*+*/- 100) { // Seeded fault // Adjacent and in stay$1$
TestCFG2_101.java$$Line560$		if (c1 + 1 == c2 && t2 - t1 > STAY_TIME + 100) { // Adjacent and in walk:		if (c1 + 1 == c2 && t2 - t1 > STAY_TIME /*+*/- 200) { // Seeded fault // Adjacent and in walk$1$
TestCFG2_102.java$$Line573$		if (c1 + 2 == c2 && t2 - t1 <= 2 * (STAY_TIME + 100)) { // Skipping 1 and in stay:		if (c1 + 2 == c2 && t2 - t1 <= 2 * (STAY_TIME /*+*/- 100)) { // Seeded fault // Skipping 1 and in stay$1$
TestCFG2_103.java$$Line586$		if (c1 + 2 == c2 && t2 - t1 >= 2 * (long) (WALK_DIST / VELOCITY * 1000)) { // Skipping 1 and in walk:		if (c1 + 2 == c2 && t2 - t1 >= /*2*/4 * (long) (WALK_DIST / VELOCITY * 1000)) { // Seeded fault // Skipping 1 and in walk$1$
TestCFG2_104.java$$Line599$		if (c1 + 2 == c2 && t2 - t1 > 2 * (STAY_TIME + 100) &&:		if (c1 + 2 == c2 && t2 - t1 > 2 * (STAY_TIME /*+*/- 200) && // Seeded fault$1$
TestCFG2_105.java$$Line546$		if (c1 + 1 == c2 && t2 - t1 <= STAY_TIME + 100) { // Adjacent and in stay:		if (c1 + 1 == c2 && t2 - t1 <= STAY_TIME + /*100*/300) { // Seeded fault // Adjacent and in stay$1$
TestCFG2_106.java$$Line560$		if (c1 + 1 == c2 && t2 - t1 > STAY_TIME + 100) { // Adjacent and in walk:		if (c1 + 1 == c2 && t2 - t1 > STAY_TIME + /*100*/300) { // Seeded fault // Adjacent and in walk$1$
TestCFG2_107.java$$Line573$		if (c1 + 2 == c2 && t2 - t1 <= 2 * (STAY_TIME + 100)) { // Skipping 1 and in stay:		if (c1 + 2 == c2 && t2 - t1 <= 2 * (STAY_TIME + /*100*/200)) { // Seeded fault // Skipping 1 and in stay$1$
TestCFG2_108.java$$Line586$		if (c1 + 2 == c2 && t2 - t1 >= 2 * (long) (WALK_DIST / VELOCITY * 1000)) { // Skipping 1 and in walk:		if (c1 + 2 == c2 && t2 - t1 >= /*2*/3 * (long) (WALK_DIST / VELOCITY * 1000)) { // Seeded fault // Skipping 1 and in walk$1$
TestCFG2_109.java$$Line599$		if (c1 + 2 == c2 && t2 - t1 > 2 * (STAY_TIME + 100) &&:		if (c1 + 2 == c2 && t2 - t1 > 2 * (STAY_TIME + /*100*/200) && // Seeded fault$1$
TestCFG2_11.java$$Line139$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstX = curEstX /*+*/- ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_110.java$$Line548$			return true;:			return /*true*/false; // Seeded fault$1$
TestCFG2_111.java$$Line546$		if (c1 + 1 == c2 && t2 - t1 <= STAY_TIME + 100) { // Adjacent and in stay:		if (c1 + 1 /*==*/<= c2 && t2 - t1 <= STAY_TIME + 100) { // Seeded fault // Adjacent and in stay$1$
TestCFG2_112.java$$Line561$			return true;:			return /*true*/false; // Seeded fault$1$
TestCFG2_113.java$$Line560$		if (c1 + 1 == c2 && t2 - t1 > STAY_TIME + 100) { // Adjacent and in walk:		if (c1 + 1 /*==*/>= c2 && t2 - t1 > STAY_TIME + 100) { // Seeded fault // Adjacent and in walk$1$
TestCFG2_114.java$$Line574$			return true;:			return /*true*/false; // Seeded fault$1$
TestCFG2_115.java$$Line573$		if (c1 + 2 == c2 && t2 - t1 <= 2 * (STAY_TIME + 100)) { // Skipping 1 and in stay:		if (c1 + 2 /*==*/>= c2 && t2 - t1 <= 2 * (STAY_TIME + 100)) { // Seeded fault // Skipping 1 and in stay$1$
TestCFG2_116.java$$Line587$			return true;:			return /*true*/false; // Seeded fault$1$
TestCFG2_117.java$$Line589$			return false;:			return /*false*/true; // Seeded fault$1$
TestCFG2_118.java$$Line601$			return true;:			return /*true*/false; // Seeded fault$1$
TestCFG2_119.java$$Line599$		if (c1 + 2 == c2 && t2 - t1 > 2 * (STAY_TIME + 100) &&:		if (c1 + 2 /*==*/<= c2 && t2 - t1 > 2 * (STAY_TIME + 100) &&$1$
TestCFG2_12.java$$Line183$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = curEstX /*+*/- ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_120.java$$Line546$		if (c1 + 1 == c2 && t2 - t1 <= STAY_TIME + 100) { // Adjacent and in stay:		if (c1 + 1 == c2/* && t2 - t1 <= STAY_TIME + 100*/) { // Seeded fault // Adjacent and in stay$1$
TestCFG2_121.java$$Line560$		if (c1 + 1 == c2 && t2 - t1 > STAY_TIME + 100) { // Adjacent and in walk:		if (c1 + 1 == c2 /*&&*/|| t2 - t1 > STAY_TIME + 100) { // Seeded fault // Adjacent and in walk$1$
TestCFG2_122.java$$Line560$		if (c1 + 1 == c2 && t2 - t1 > STAY_TIME + 100) { // Adjacent and in walk:		if (c1 + 1 == c2 /*&&*/|| t2 - t1 > STAY_TIME + 100) { // Seeded fault // Adjacent and in walk$1$
TestCFG2_123.java$$Line573$		if (c1 + 2 == c2 && t2 - t1 <= 2 * (STAY_TIME + 100)) { // Skipping 1 and in stay:		if (c1 + 2 == c2 /*&&*/|| t2 - t1 <= 2 * (STAY_TIME + 100)) { // Seeded fault // Skipping 1 and in stay$1$
TestCFG2_124.java$$Line586$		if (c1 + 2 == c2 && t2 - t1 >= 2 * (long) (WALK_DIST / VELOCITY * 1000)) { // Skipping 1 and in walk:		if (/*c1 + 2 == c2 && */t2 - t1 >= 2 * (long) (WALK_DIST / VELOCITY * 1000)) { // Seeded fault // Skipping 1 and in walk$1$
TestCFG2_125.java$$Line586$		if (c1 + 2 == c2 && t2 - t1 >= 2 * (long) (WALK_DIST / VELOCITY * 1000)) { // Skipping 1 and in walk:		if (c1 + 2 == c2 /*&&*/|| t2 - t1 >= 2 * (long) (WALK_DIST / VELOCITY * 1000)) { // Seeded fault // Skipping 1 and in walk$1$
TestCFG2_126.java$$Line599$		if (c1 + 2 == c2 && t2 - t1 > 2 * (STAY_TIME + 100) &&:		if (/*c1 + 2 == c2 && */t2 - t1 > 2 * (STAY_TIME + 100) && // Seeded fault$1$
TestCFG2_127.java$$Line599$		if (c1 + 2 == c2 && t2 - t1 > 2 * (STAY_TIME + 100) &&:		if (c1 + 2 == c2 /*&&*/|| t2 - t1 > 2 * (STAY_TIME + 100) && // Seeded fault$1$
TestCFG2_128.java$$Line599$		if (c1 + 2 == c2 && t2 - t1 > 2 * (STAY_TIME + 100) &&:		if (c1 + 2 == c2 && t2 - t1 > 2 * (STAY_TIME + 100)/* &&$$Line600$			t2 - t1 < 2 * (long) (WALK_DIST / VELOCITY * 1000)) { // Skipping 1 and in stay and walk:			t2 - t1 < 2 * (long) (WALK_DIST / VELOCITY * 1000)*/) { // Seeded fault // Skipping 1 and in stay and walk$2$
TestCFG2_129.java$$Line599$		if (c1 + 2 == c2 && t2 - t1 > 2 * (STAY_TIME + 100) &&:		if (c1 + 2 == c2 && t2 - t1 > 2 * (STAY_TIME + 100) /*&&*/|| // Seeded fault$1$
TestCFG2_13.java$$Line208$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstY = curEstY /*+*/- ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_130.java$$Line625$		if (dist <= 2 * ERR) {:		if (dist <= 2 * /*ERR*/(ERR + 0.05)) { // Seeded fault$1$
TestCFG2_131.java$$Line653$		double vmin = (VELOCITY * ((double) t / 1000) - 2 * ERR) / ((double) t / 1000);:		double vmin = (VELOCITY * ((double) t / 1000) - 2 * /*ERR*/(ERR - 0.1)) / ((double) t / 1000); // Seeded fault$1$
TestCFG2_132.java$$Line654$		double vmax = (VELOCITY * ((double) t / 1000) + 2 * ERR) / ((double) t / 1000);:		double vmax = (VELOCITY * ((double) t / 1000) + 2 * /*ERR*/(ERR + 0.1)) / ((double) t / 1000); // Seeded fault$1$
TestCFG2_133.java$$Line684$		double vmax = (VELOCITY * ((double) t / 1000) + 2 * ERR) / ((double) t / 1000);:		double vmax = (VELOCITY * ((double) t / 1000) + 2 * /*ERR*/(ERR + 0.1)) / ((double) t / 1000); // Seeded fault$1$
TestCFG2_134.java$$Line714$		double vmin = (VELOCITY * ((double) t / 1000) - 2 * ERR) / ((double) t / 1000);:		double vmin = (VELOCITY * ((double) t / 1000) - 2 * /*ERR*/(ERR - 0.1)) / ((double) t / 1000); // Seeded fault$$Line715$		double vmax = (VELOCITY * ((double) t / 1000) + 2 * ERR) / ((double) t / 1000);:		double vmax = (VELOCITY * ((double) t / 1000) + 2 * /*ERR*/(ERR + 0.1)) / ((double) t / 1000); // Seeded fault$2$
TestCFG2_135.java$$Line653$		double vmin = (VELOCITY * ((double) t / 1000) - 2 * ERR) / ((double) t / 1000);:		double vmin = (/*VELOCITY*/(VELOCITY - 1.0) * ((double) t / 1000) - 2 * ERR) / ((double) t / 1000); // Seeded fault$1$
TestCFG2_136.java$$Line684$		double vmax = (VELOCITY * ((double) t / 1000) + 2 * ERR) / ((double) t / 1000);:		double vmax = (/*VELOCITY*/(VELOCITY + 1.0) * ((double) t / 1000) + 2 * ERR) / ((double) t / 1000); // Seeded fault$1$
TestCFG2_137.java$$Line710$		long t = TimeFormat.convert(v4) - TimeFormat.convert(v2) - STAY_TIME; // Different here:		long t = TimeFormat.convert(v4) - TimeFormat.convert(v2)/* - STAY_TIME*/; // Seeded fault // Different here$1$
TestCFG2_138.java$$Line714$		double vmin = (VELOCITY * ((double) t / 1000) - 2 * ERR) / ((double) t / 1000);:		double vmin = (/*VELOCITY*/(VELOCITY + 1.0) * ((double) t / 1000) - 2 * ERR) / ((double) t / 1000); // Seeded fault$$Line715$		double vmax = (VELOCITY * ((double) t / 1000) + 2 * ERR) / ((double) t / 1000);:		double vmax = (/*VELOCITY*/(VELOCITY - 1.0) * ((double) t / 1000) + 2 * ERR) / ((double) t / 1000); // Seeded fault$2$
TestCFG2_139.java$$Line653$		double vmin = (VELOCITY * ((double) t / 1000) - 2 * ERR) / ((double) t / 1000);:		double vmin = (VELOCITY * ((double) t / 1000) - /*2 **/ ERR) / ((double) t / 1000); // Seeded fault$$Line654$		double vmax = (VELOCITY * ((double) t / 1000) + 2 * ERR) / ((double) t / 1000);:		double vmax = (VELOCITY * ((double) t / 1000) + /*2 **/ ERR) / ((double) t / 1000); // Seeded fault$2$
TestCFG2_14.java$$Line245$		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstY = curEstY /*+*/- ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_15.java$$Line268$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstX = curEstX /*+*/- ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_16.java$$Line305$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = curEstX /*+*/- ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$$Line306$		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstY = curEstY /*+*/- ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$2$
TestCFG2_17.java$$Line330$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstY = curEstY /*+*/- ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_18.java$$Line427$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = curEstX /*+*/- ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_19.java$$Line452$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstY = curEstY /*+*/- ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_20.java$$Line100$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = curEstX + ((double) /*2*/1 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$$Line101$		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstY = curEstY + ((double) /*2*/1 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$2$
TestCFG2_21.java$$Line139$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstX = curEstX + ((double) /*2*/1 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_22.java$$Line183$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = curEstX + ((double) /*2*/1 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_23.java$$Line208$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstY = curEstY + ((double) /*2*/1 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_24.java$$Line244$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = curEstX + ((double) /*2*/1 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$$Line245$		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstY = curEstY + ((double) /*2*/1 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$2$
TestCFG2_25.java$$Line268$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstX = curEstX + ((double) /*2*/1 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_26.java$$Line305$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = curEstX + ((double) /*2*/1 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_27.java$$Line390$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstX = curEstX + ((double) /*2*/1 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$$Line391$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstY = curEstY + ((double) /*2*/1 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$2$
TestCFG2_28.java$$Line427$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = curEstX + ((double) /*2*/1 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_29.java$$Line452$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstY = curEstY + ((double) /*2*/1 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_30.java$$Line100$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = curEstX + ((double) 2 * rand.nextDouble() /*-*/+ (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_31.java$$Line140$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstY = curEstY + ((double) 2 * rand.nextDouble() /*-*/+ (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_32.java$$Line183$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = curEstX + ((double) 2 * rand.nextDouble() /*- (double) 1*/) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_33.java$$Line207$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) /*1*/0.5) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$$Line208$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) /*1*/0.5) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$2$
TestCFG2_34.java$$Line139$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * /*NOISE*/(NOISE + 0.1);  // [- NOISE, + NOISE)$$Line140$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * /*NOISE*/(NOISE + 0.1);  // [- NOISE, + NOISE)$$Line244$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$$Line245$		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$4$
TestCFG2_35.java$$Line268$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * /*NOISE*/(NOISE - 0.1);  // Seeded fault // [- NOISE, + NOISE)$$Line269$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * /*NOISE*/(NOISE - 0.1);  // Seeded fault // [- NOISE, + NOISE)$2$
TestCFG2_36.java$$Line305$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = curEstX + ((double) 2 * rand.nextDouble() /*- (double) 1*/) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$$Line306$		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstY = curEstY + ((double) 2 * rand.nextDouble() /*- (double) 1*/) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$2$
TestCFG2_37.java$$Line329$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$$Line330$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1)/* * NOISE*/;  // Seeded fault // [- NOISE, + NOISE)$2$
TestCFG2_38.java$$Line366$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = /*curEstX + */((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_39.java$$Line451$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		//	curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // Seeded fault // [- NOISE, + NOISE)$1$
TestCFG2_40.java$$Line148$				t = STAY_TIME;:				t = (long) (dist / VELOCITY * 1000); // t = STAY_TIME; // Seeded fault$1$
TestCFG2_41.java$$Line187$		t = (long) (dist / VELOCITY * 1000); // Experimentation: Estimated time required from lastLoc to actLoc:	//	t = (long) (dist / VELOCITY * 1000); // Seeded fault // Experimentation: Estimated time required from lastLoc to actLoc$1$
TestCFG2_42.java$$Line211$			t = STAY_TIME; // Experimentation::		//	t = STAY_TIME; // Seeded fault // Experimentation:$1$
TestCFG2_43.java$$Line187$		t = (long) (dist / VELOCITY * 1000); // Experimentation: Estimated time required from lastLoc to actLoc:		t = STAY_TIME; // t = (long) (dist / VELOCITY * 1000); // Seeded fault // Experimentation: Estimated time required from lastLoc to actLoc$1$
TestCFG2_44.java$$Line211$			t = STAY_TIME; // Experimentation::		//	t = STAY_TIME; // Seeded fault // Experimentation:$1$
TestCFG2_45.java$$Line248$		t = (long) (dist / VELOCITY * 1000); // Experimentation: Estimated time required from lastLoc to actLoc:		t = (long) (dist / VELOCITY * /*1000*/10000); // Seeded fault // Experimentation: Estimated time required from lastLoc to actLoc$1$
TestCFG2_46.java$$Line272$			t = STAY_TIME; // Experimentation::			t = /*STAY_TIME*/2 * STAY_TIME; // Seeded fault // Experimentation:$1$
TestCFG2_47.java$$Line309$		t = (long) (dist / VELOCITY * 1000); // Experimentation: Estimated time required from lastLoc to actLoc:	//	t = (long) (dist / VELOCITY * 1000); // Seeded fault // Experimentation: Estimated time required from lastLoc to actLoc$1$
TestCFG2_48.java$$Line394$			t = STAY_TIME; // Experimentation::			t = (long) (dist / VELOCITY * 1000); // t = STAY_TIME; // Seeded fault // Experimentation:$1$
TestCFG2_49.java$$Line455$			t = STAY_TIME; // Experimentation::		//	t = STAY_TIME; // Seeded fault // Experimentation:$1$
TestCFG2_50.java$$Line127$		counter = counter + 1;:		counter = counter + /*1*/0; // Seeded fault$1$
TestCFG2_51.java$$Line166$			counter = counter + 1;:			counter = counter + /*1*/0; // Seeded fault$1$
TestCFG2_52.java$$Line227$			counter = counter + 1;:			counter = counter + /*1*/2; // Seeded fault$1$
TestCFG2_53.java$$Line261$		counter = counter + 1;:		counter = counter /*+ 1*/- 1; // Seeded fault$1$
TestCFG2_54.java$$Line288$			counter = counter + 1;:			counter = counter /*+ 1*/+ 0; // Seeded fault$1$
TestCFG2_55.java$$Line322$		counter = counter + 1;:		counter = counter + /*1*/0; // Seeded fault$1$
TestCFG2_56.java$$Line349$			counter = counter + 1;:			counter = counter + /*1*/2; // Seeded fault$1$
TestCFG2_57.java$$Line383$		counter = counter + 1;:		counter = counter /*+ 1*/- 1; // Seeded fault$1$
TestCFG2_58.java$$Line444$		counter = counter + 1;:		counter = counter + /*1*/2; // Seeded fault$1$
TestCFG2_59.java$$Line471$			counter = counter + 1;:			counter = counter + /*1*/0; // Seeded fault$1$
TestCFG2_60.java$$Line181$		curEstX = estLoc.x;:	//	curEstX = estLoc.x; // Seeded fault$1$
TestCFG2_61.java$$Line182$		curEstY = estLoc.y;:	//	curEstY = estLoc.y; // Seeded fault$1$
TestCFG2_62.java$$Line205$			curEstX = estLoc.x;:		//	curEstX = estLoc.x; // Seeded fault$$Line206$			curEstY = estLoc.y;:		//	curEstY = estLoc.y; // Seeded fault$2$
TestCFG2_63.java$$Line242$		curEstX = estLoc.x;:	//	curEstX = estLoc.x; // Seeded fault$1$
TestCFG2_64.java$$Line267$			curEstY = estLoc.y;:		//	curEstY = estLoc.y; // Seeded fault$1$
TestCFG2_65.java$$Line303$		curEstX = estLoc.x;:	//	curEstX = estLoc.x; // Seeded fault$1$
TestCFG2_66.java$$Line327$			curEstX = estLoc.x;:		//	curEstX = estLoc.x; // Seeded fault$1$
TestCFG2_67.java$$Line364$		curEstX = estLoc.x;:	//	curEstX = estLoc.x; // Seeded fault$$Line365$		curEstY = estLoc.y;:	//	curEstY = estLoc.y; // Seeded fault$2$
TestCFG2_68.java$$Line425$		curEstX = estLoc.x;:	//	curEstX = estLoc.x; // Seeded fault$1$
TestCFG2_69.java$$Line450$			curEstY = estLoc.y;:		//	curEstY = estLoc.y; // Seeded fault$1$
TestCFG2_70.java$$Line181$		curEstX = estLoc.x;:		curEstX = estLoc./*x*/y; // Seeded fault$1$
TestCFG2_71.java$$Line182$		curEstY = estLoc.y;:		curEstY = estLoc./*y*/x; // Seeded fault$1$
TestCFG2_72.java$$Line213$			lastPos = cPos;:		//	lastPos = cPos; // Seeded fault$1$
TestCFG2_73.java$$Line250$		lastPos = cPos;:	//	lastPos = cPos; // Seeded fault$1$
TestCFG2_74.java$$Line266$			curEstX = estLoc.x;:			curEstX = /*estLoc*/actLoc.x; // Seeded fault$1$
TestCFG2_75.java$$Line304$		curEstY = estLoc.y;:		curEstY = estLoc./*y*/x; // Seeded fault$1$
TestCFG2_76.java$$Line299$		bPos = cPos;:	//	bPos = cPos; // Seeded fault$1$
TestCFG2_77.java$$Line364$		curEstX = estLoc.x;:		curEstX = estLoc./*x*/y; // Seeded fault$1$
TestCFG2_78.java$$Line433$		lastPos = cPos;:	//	lastPos = cPos; // Seeded fault$1$
TestCFG2_79.java$$Line450$			curEstY = estLoc.y;:			curEstY = /*estLoc*/actLoc.y; // Seeded fault$1$
TestCFG2_80.java$$Line157$			displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + :			displace = Math.sqrt((location.x /*-*/+ lastLocation.x) * (location.x /*-*/+ lastLocation.x) +  // Seeded fault$$Line160$			error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + :			error = Math.sqrt((actLoc.x /*-*/+ location.x) * (actLoc.x /*-*/+ location.x) +  // Seeded fault$2$
TestCFG2_81.java$$Line158$					(location.y - lastLocation.y) * (location.y - lastLocation.y));:					(location.y /*-*/+ lastLocation.y) * (location.y /*-*/+ lastLocation.y)); // Seeded fault$$Line161$					(actLoc.y - location.y) * (actLoc.y - location.y));:					(actLoc.y /*-*/+ location.y) * (actLoc.y /*-*/+ location.y)); // Seeded fault$2$
TestCFG2_82.java$$Line218$			displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + :			displace = Math.sqrt((location.x /*-*/+ lastLocation.x) * (location.x /*-*/+ lastLocation.x) +  // Seeded fault$$Line219$					(location.y - lastLocation.y) * (location.y - lastLocation.y));:					(location.y /*-*/+ lastLocation.y) * (location.y /*-*/+ lastLocation.y)); // Seeded fault$$Line221$			error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + :			error = Math.sqrt((actLoc.x /*-*/+ location.x) * (actLoc.x /*-*/+ location.x) +  // Seeded fault$$Line222$					(actLoc.y - location.y) * (actLoc.y - location.y));:					(actLoc.y /*-*/+ location.y) * (actLoc.y /*-*/+ location.y)); // Seeded fault$4$
TestCFG2_83.java$$Line218$			displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + :			displace = Math.sqrt((location.x - lastLocation./*x*/y) * (location.x - lastLocation./*x*/y) +  // Seeded fault$$Line221$			error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + :			error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) /*+*//  // Seeded fault$2$
TestCFG2_84.java$$Line257$		moved = moved + toBoolean(displace);:		moved = moved + /*toBoolean(displace)*/1; // Seeded fault$$Line260$		lastLocation = location;:		if (error <= ERR) { // Seeded fault$$Line261$		counter = counter + 1;:			reliable = reliable + 1; // Seeded fault$$Line262$		while (stay > 0) { // 2:		} // Seeded fault$$Line263$			stay = stay - 1;:		lastLocation = location;$$Line264$			actLoc = scenarios.getActLoc(sid, cPos);:		counter = counter + 1;$$Line265$			estLoc = scenarios.getEstLoc(sid, cPos);:		while (stay > 0) { // 2$$Line266$			curEstX = estLoc.x;:			stay = stay - 1;$$Line267$			curEstY = estLoc.y;:			actLoc = scenarios.getActLoc(sid, cPos);$$Line268$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			estLoc = scenarios.getEstLoc(sid, cPos);$$Line269$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstX = estLoc.x;$$Line270$			lastLoc = scenarios.getActLoc(sid, lastPos); // The actual location for lastPos:			curEstY = estLoc.y;$$Line271$			dist = Coordinates.calDist(lastLoc, actLoc);:			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE)$$Line272$			t = STAY_TIME; // Experimentation::			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE)$$Line273$			timestamp = timestamp + t;:			lastLoc = scenarios.getActLoc(sid, lastPos); // The actual location for lastPos$$Line274$			lastPos = cPos;:			dist = Coordinates.calDist(lastLoc, actLoc);$$Line275$			candidate = generateCtx();:			t = STAY_TIME; // Experimentation:$$Line276$			resolve();:			timestamp = timestamp + t;$$Line277$			location = toCoordinates(candidate);:			lastPos = cPos;$$Line278$		//	distance = distance + Coordinates.calDist(location, lastLocation); // Experiments: calculate distance:			candidate = generateCtx();$$Line279$			displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + :			resolve();$$Line280$					(location.y - lastLocation.y) * (location.y - lastLocation.y));:			location = toCoordinates(candidate);$$Line281$			moved = moved + toBoolean(displace);:		//	distance = distance + Coordinates.calDist(location, lastLocation); // Experiments: calculate distance$$Line282$			error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + :			displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + $$Line283$					(actLoc.y - location.y) * (actLoc.y - location.y));:					(location.y - lastLocation.y) * (location.y - lastLocation.y));$$Line284$			if (error <= ERR) {:			moved = moved + toBoolean(displace);$$Line285$				reliable = reliable + 1;:			error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + $$Line286$			}:					(actLoc.y - location.y) * (actLoc.y - location.y));$$Line287$			lastLocation = location;:			if (error <= ERR) {$$Line288$			counter = counter + 1;:				reliable = reliable + 1;$$Line289$		}:			}$$Line290$:			lastLocation = location;$$Line291$		// 3:			counter = counter + 1;$$Line292$		cPos = rand.nextInt(CCRScenarios.POS_NUM);:		}$$Line293$		while (cPos == -1 || cPos == bPos ||:$$Line294$			Coordinates.calDist(scenarios.getActLoc(sid, bPos), scenarios.getActLoc(sid, cPos)) < WALK_DIST) {:		// 3$$Line295$			cPos = rand.nextInt(CCRScenarios.POS_NUM);:		cPos = rand.nextInt(CCRScenarios.POS_NUM);$$Line296$		}:		while (cPos == -1 || cPos == bPos ||$$Line297$		stay = rand.nextInt(MAX_STAY) + 1;:			Coordinates.calDist(scenarios.getActLoc(sid, bPos), scenarios.getActLoc(sid, cPos)) < WALK_DIST) {$$Line298$		c = c + stay;:			cPos = rand.nextInt(CCRScenarios.POS_NUM);$$Line299$		bPos = cPos;:		}$$Line300$		stay = stay - 1; // 3:		stay = rand.nextInt(MAX_STAY) + 1;$$Line301$		actLoc = scenarios.getActLoc(sid, cPos);:		c = c + stay;$$Line302$		estLoc = scenarios.getEstLoc(sid, cPos);:		bPos = cPos;$$Line303$		curEstX = estLoc.x;:		stay = stay - 1; // 3$$Line304$		curEstY = estLoc.y;:		actLoc = scenarios.getActLoc(sid, cPos);$$Line305$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		estLoc = scenarios.getEstLoc(sid, cPos);$$Line306$		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = estLoc.x;$$Line307$		lastLoc = scenarios.getActLoc(sid, lastPos); // The actual location for lastPos:		curEstY = estLoc.y;$$Line308$		dist = Coordinates.calDist(lastLoc, actLoc);:		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE)$$Line309$		t = (long) (dist / VELOCITY * 1000); // Experimentation: Estimated time required from lastLoc to actLoc:		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE)$$Line310$		timestamp = timestamp + t;:		lastLoc = scenarios.getActLoc(sid, lastPos); // The actual location for lastPos$$Line311$		lastPos = cPos;:		dist = Coordinates.calDist(lastLoc, actLoc);$$Line312$		candidate = generateCtx();:		t = (long) (dist / VELOCITY * 1000); // Experimentation: Estimated time required from lastLoc to actLoc$$Line313$		resolve();:		timestamp = timestamp + t;$$Line314$		location = toCoordinates(candidate);:		lastPos = cPos;$$Line315$	//	distance = distance + Coordinates.calDist(location, lastLocation); // Experiments: calculate distance:		candidate = generateCtx();$$Line316$		displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + :		resolve();$$Line317$				(location.y - lastLocation.y) * (location.y - lastLocation.y));:		location = toCoordinates(candidate);$$Line318$		moved = moved + toBoolean(displace);:	//	distance = distance + Coordinates.calDist(location, lastLocation); // Experiments: calculate distance$$Line319$		error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + :		displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + $$Line320$				(actLoc.y - location.y) * (actLoc.y - location.y));:				(location.y - lastLocation.y) * (location.y - lastLocation.y));$$Line321$		lastLocation = location;:		moved = moved + toBoolean(displace);$$Line322$		counter = counter + 1;:		error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + $$Line323$		while (stay > 0) { // 3:				(actLoc.y - location.y) * (actLoc.y - location.y));$$Line324$			stay = stay - 1;:		lastLocation = location;$$Line325$			actLoc = scenarios.getActLoc(sid, cPos);:		counter = counter + 1;$$Line326$			estLoc = scenarios.getEstLoc(sid, cPos);:		while (stay > 0) { // 3$$Line327$			curEstX = estLoc.x;:			stay = stay - 1;$$Line328$			curEstY = estLoc.y;:			actLoc = scenarios.getActLoc(sid, cPos);$$Line329$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			estLoc = scenarios.getEstLoc(sid, cPos);$$Line330$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstX = estLoc.x;$$Line331$			lastLoc = scenarios.getActLoc(sid, lastPos); // The actual location for lastPos:			curEstY = estLoc.y;$$Line332$			dist = Coordinates.calDist(lastLoc, actLoc);:			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE)$$Line333$			t = STAY_TIME; // Experimentation::			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE)$$Line334$			timestamp = timestamp + t;:			lastLoc = scenarios.getActLoc(sid, lastPos); // The actual location for lastPos$$Line335$			lastPos = cPos;:			dist = Coordinates.calDist(lastLoc, actLoc);$$Line336$			candidate = generateCtx();:			t = STAY_TIME; // Experimentation:$$Line337$			resolve();:			timestamp = timestamp + t;$$Line338$			location = toCoordinates(candidate);:			lastPos = cPos;$$Line339$		//	distance = distance + Coordinates.calDist(location, lastLocation); // Experiments: calculate distance:			candidate = generateCtx();$$Line340$			displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + :			resolve();$$Line341$					(location.y - lastLocation.y) * (location.y - lastLocation.y));:			location = toCoordinates(candidate);$$Line342$			moved = moved + toBoolean(displace);:		//	distance = distance + Coordinates.calDist(location, lastLocation); // Experiments: calculate distance$$Line343$			error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + :			displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + $$Line344$					(actLoc.y - location.y) * (actLoc.y - location.y));:					(location.y - lastLocation.y) * (location.y - lastLocation.y));$$Line345$			if (error <= ERR) {:			moved = moved + toBoolean(displace);$$Line346$				reliable = reliable + 1;:			error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + $$Line347$			}:					(actLoc.y - location.y) * (actLoc.y - location.y));$$Line348$			lastLocation = location;:			if (error <= ERR) {$$Line349$			counter = counter + 1;:				reliable = reliable + 1;$$Line350$		}:			}$$Line351$:			lastLocation = location;$$Line352$		// 4:			counter = counter + 1;$$Line353$		cPos = rand.nextInt(CCRScenarios.POS_NUM);:		}$$Line354$		while (cPos == -1 || cPos == bPos ||:$$Line355$			Coordinates.calDist(scenarios.getActLoc(sid, bPos), scenarios.getActLoc(sid, cPos)) < WALK_DIST) {:		// 4$$Line356$			cPos = rand.nextInt(CCRScenarios.POS_NUM);:		cPos = rand.nextInt(CCRScenarios.POS_NUM);$$Line357$		}:		while (cPos == -1 || cPos == bPos ||$$Line358$		stay = rand.nextInt(MAX_STAY) + 1;:			Coordinates.calDist(scenarios.getActLoc(sid, bPos), scenarios.getActLoc(sid, cPos)) < WALK_DIST) {$$Line359$		c = c + stay;:			cPos = rand.nextInt(CCRScenarios.POS_NUM);$$Line360$		bPos = cPos;:		}$$Line361$		stay = stay - 1; // 4:		stay = rand.nextInt(MAX_STAY) + 1;$$Line362$		actLoc = scenarios.getActLoc(sid, cPos);:		c = c + stay;$$Line363$		estLoc = scenarios.getEstLoc(sid, cPos);:		bPos = cPos;$$Line364$		curEstX = estLoc.x;:		stay = stay - 1; // 4$$Line365$		curEstY = estLoc.y;:		actLoc = scenarios.getActLoc(sid, cPos);$$Line366$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		estLoc = scenarios.getEstLoc(sid, cPos);$$Line367$		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = estLoc.x;$$Line368$		lastLoc = scenarios.getActLoc(sid, lastPos); // The actual location for lastPos:		curEstY = estLoc.y;$$Line369$		dist = Coordinates.calDist(lastLoc, actLoc);:		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE)$$Line370$		t = (long) (dist / VELOCITY * 1000); // Experimentation: Estimated time required from lastLoc to actLoc:		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE)$$Line371$		timestamp = timestamp + t;:		lastLoc = scenarios.getActLoc(sid, lastPos); // The actual location for lastPos$$Line372$		lastPos = cPos;:		dist = Coordinates.calDist(lastLoc, actLoc);$$Line373$		candidate = generateCtx();:		t = (long) (dist / VELOCITY * 1000); // Experimentation: Estimated time required from lastLoc to actLoc$$Line374$		resolve();:		timestamp = timestamp + t;$$Line375$		location = toCoordinates(candidate);:		lastPos = cPos;$$Line376$	//	distance = distance + Coordinates.calDist(location, lastLocation); // Experiments: calculate distance:		candidate = generateCtx();$$Line377$		displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + :		resolve();$$Line378$				(location.y - lastLocation.y) * (location.y - lastLocation.y));:		location = toCoordinates(candidate);$$Line379$		moved = moved + toBoolean(displace);:	//	distance = distance + Coordinates.calDist(location, lastLocation); // Experiments: calculate distance$$Line380$		error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + :		displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + $$Line381$				(actLoc.y - location.y) * (actLoc.y - location.y));:				(location.y - lastLocation.y) * (location.y - lastLocation.y));$$Line382$		lastLocation = location;:		moved = moved + toBoolean(displace);$$Line383$		counter = counter + 1;:		error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + $$Line384$		while (stay > 0) { // 4:				(actLoc.y - location.y) * (actLoc.y - location.y));$$Line385$			stay = stay - 1;:		lastLocation = location;$$Line386$			actLoc = scenarios.getActLoc(sid, cPos);:		counter = counter + 1;$$Line387$			estLoc = scenarios.getEstLoc(sid, cPos);:		while (stay > 0) { // 4$$Line388$			curEstX = estLoc.x;:			stay = stay - 1;$$Line389$			curEstY = estLoc.y;:			actLoc = scenarios.getActLoc(sid, cPos);$$Line390$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			estLoc = scenarios.getEstLoc(sid, cPos);$$Line391$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstX = estLoc.x;$$Line392$			lastLoc = scenarios.getActLoc(sid, lastPos); // The actual location for lastPos:			curEstY = estLoc.y;$$Line393$			dist = Coordinates.calDist(lastLoc, actLoc);:			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE)$$Line394$			t = STAY_TIME; // Experimentation::			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE)$$Line395$			timestamp = timestamp + t;:			lastLoc = scenarios.getActLoc(sid, lastPos); // The actual location for lastPos$$Line396$			lastPos = cPos;:			dist = Coordinates.calDist(lastLoc, actLoc);$$Line397$			candidate = generateCtx();:			t = STAY_TIME; // Experimentation:$$Line398$			resolve();:			timestamp = timestamp + t;$$Line399$			location = toCoordinates(candidate);:			lastPos = cPos;$$Line400$		//	distance = distance + Coordinates.calDist(location, lastLocation); // Experiments: calculate distance:			candidate = generateCtx();$$Line401$			displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + :			resolve();$$Line402$					(location.y - lastLocation.y) * (location.y - lastLocation.y));:			location = toCoordinates(candidate);$$Line403$			moved = moved + toBoolean(displace);:		//	distance = distance + Coordinates.calDist(location, lastLocation); // Experiments: calculate distance$$Line404$			error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + :			displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + $$Line405$					(actLoc.y - location.y) * (actLoc.y - location.y));:					(location.y - lastLocation.y) * (location.y - lastLocation.y));$$Line406$			if (error <= ERR) {:			moved = moved + toBoolean(displace);$$Line407$				reliable = reliable + 1;:			error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + $$Line408$			}:					(actLoc.y - location.y) * (actLoc.y - location.y));$$Line409$			lastLocation = location;:			if (error <= ERR) {$$Line410$			counter = counter + 1;:				reliable = reliable + 1;$$Line411$		}:			}$$Line412$:			lastLocation = location;$$Line413$		// 5:			counter = counter + 1;$$Line414$		cPos = rand.nextInt(CCRScenarios.POS_NUM);:		}$$Line415$		while (cPos == -1 || cPos == bPos ||:$$Line416$			Coordinates.calDist(scenarios.getActLoc(sid, bPos), scenarios.getActLoc(sid, cPos)) < WALK_DIST) {:		// 5$$Line417$			cPos = rand.nextInt(CCRScenarios.POS_NUM);:		cPos = rand.nextInt(CCRScenarios.POS_NUM);$$Line418$		}:		while (cPos == -1 || cPos == bPos ||$$Line419$		stay = rand.nextInt(MAX_STAY) + 1;:			Coordinates.calDist(scenarios.getActLoc(sid, bPos), scenarios.getActLoc(sid, cPos)) < WALK_DIST) {$$Line420$		c = c + stay;:			cPos = rand.nextInt(CCRScenarios.POS_NUM);$$Line421$		bPos = cPos;:		}$$Line422$		stay = stay - 1; // 5:		stay = rand.nextInt(MAX_STAY) + 1;$$Line423$		actLoc = scenarios.getActLoc(sid, cPos);:		c = c + stay;$$Line424$		estLoc = scenarios.getEstLoc(sid, cPos);:		bPos = cPos;$$Line425$		curEstX = estLoc.x;:		stay = stay - 1; // 5$$Line426$		curEstY = estLoc.y;:		actLoc = scenarios.getActLoc(sid, cPos);$$Line427$		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		estLoc = scenarios.getEstLoc(sid, cPos);$$Line428$		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):		curEstX = estLoc.x;$$Line429$		lastLoc = scenarios.getActLoc(sid, lastPos); // The actual location for lastPos:		curEstY = estLoc.y;$$Line430$		dist = Coordinates.calDist(lastLoc, actLoc);:		curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE)$$Line431$		t = (long) (dist / VELOCITY * 1000); // Experimentation: Estimated time required from lastLoc to actLoc:		curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE)$$Line432$		timestamp = timestamp + t;:		lastLoc = scenarios.getActLoc(sid, lastPos); // The actual location for lastPos$$Line433$		lastPos = cPos;:		dist = Coordinates.calDist(lastLoc, actLoc);$$Line434$		candidate = generateCtx();:		t = (long) (dist / VELOCITY * 1000); // Experimentation: Estimated time required from lastLoc to actLoc$$Line435$		resolve();:		timestamp = timestamp + t;$$Line436$		location = toCoordinates(candidate);:		lastPos = cPos;$$Line437$	//	distance = distance + Coordinates.calDist(location, lastLocation); // Experiments: calculate distance:		candidate = generateCtx();$$Line438$		displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + :		resolve();$$Line439$				(location.y - lastLocation.y) * (location.y - lastLocation.y));:		location = toCoordinates(candidate);$$Line440$		moved = moved + toBoolean(displace);:	//	distance = distance + Coordinates.calDist(location, lastLocation); // Experiments: calculate distance$$Line441$		error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + :		displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + $$Line442$				(actLoc.y - location.y) * (actLoc.y - location.y));:				(location.y - lastLocation.y) * (location.y - lastLocation.y));$$Line443$		lastLocation = location;:		moved = moved + toBoolean(displace);$$Line444$		counter = counter + 1;:		error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + $$Line445$		while (stay > 0) { // 5:				(actLoc.y - location.y) * (actLoc.y - location.y));$$Line446$			stay = stay - 1;:		lastLocation = location;$$Line447$			actLoc = scenarios.getActLoc(sid, cPos);:		counter = counter + 1;$$Line448$			estLoc = scenarios.getEstLoc(sid, cPos);:		while (stay > 0) { // 5$$Line449$			curEstX = estLoc.x;:			stay = stay - 1;$$Line450$			curEstY = estLoc.y;:			actLoc = scenarios.getActLoc(sid, cPos);$$Line451$			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			estLoc = scenarios.getEstLoc(sid, cPos);$$Line452$			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE):			curEstX = estLoc.x;$$Line453$			lastLoc = scenarios.getActLoc(sid, lastPos); // The actual location for lastPos:			curEstY = estLoc.y;$$Line454$			dist = Coordinates.calDist(lastLoc, actLoc);:			curEstX = curEstX + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE)$$Line455$			t = STAY_TIME; // Experimentation::			curEstY = curEstY + ((double) 2 * rand.nextDouble() - (double) 1) * NOISE;  // [- NOISE, + NOISE)$$Line456$			timestamp = timestamp + t;:			lastLoc = scenarios.getActLoc(sid, lastPos); // The actual location for lastPos$$Line457$			lastPos = cPos;:			dist = Coordinates.calDist(lastLoc, actLoc);$$Line458$			candidate = generateCtx();:			t = STAY_TIME; // Experimentation:$$Line459$			resolve();:			timestamp = timestamp + t;$$Line460$			location = toCoordinates(candidate);:			lastPos = cPos;$$Line461$		//	distance = distance + Coordinates.calDist(location, lastLocation); // Experiments: calculate distance:			candidate = generateCtx();$$Line462$			displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + :			resolve();$$Line463$					(location.y - lastLocation.y) * (location.y - lastLocation.y));:			location = toCoordinates(candidate);$$Line464$			moved = moved + toBoolean(displace);:		//	distance = distance + Coordinates.calDist(location, lastLocation); // Experiments: calculate distance$$Line465$			error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + :			displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + $$Line466$					(actLoc.y - location.y) * (actLoc.y - location.y));:					(location.y - lastLocation.y) * (location.y - lastLocation.y));$$Line467$			if (error <= ERR) {:			moved = moved + toBoolean(displace);$$Line468$				reliable = reliable + 1;:			error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + $$Line469$			}:					(actLoc.y - location.y) * (actLoc.y - location.y));$$Line470$			lastLocation = location;:			if (error <= ERR) {$$Line471$			counter = counter + 1;:				reliable = reliable + 1;$$Line472$		}:			}$$Line473$		:			lastLocation = location;$$Line474$	//	Double result = new Double(distance);:			counter = counter + 1;$$Line475$		ApplicationResult result = new ApplicationResult(moved, reliable);:		}$$Line476$		// EXIT // NODE:		$$Line477$		:	//	Double result = new Double(distance);$$Line478$		return result;:		ApplicationResult result = new ApplicationResult(moved, reliable);$$Line479$	}:		// EXIT // NODE$$Line480$	:		$$Line481$	private Context generateCtx() {:		return result;$$Line482$		:	}$$Line483$		Context ctx = new Context();:	$$Line484$		ctx.put(Context.FLD_CATEGORY, getCategory());:	private Context generateCtx() {$$Line485$		ctx.put(Context.FLD_SUBJECT, getSubject());:		$$Line486$		ctx.put(Context.FLD_PREDICATE, getPredicate());:		Context ctx = new Context();$$Line487$		ctx.put(Context.FLD_OBJECT, getObject());:		ctx.put(Context.FLD_CATEGORY, getCategory());$$Line488$		ctx.put(Context.FLD_START_FROM, getStartFrom());:		ctx.put(Context.FLD_SUBJECT, getSubject());$$Line489$		ctx.put(Context.FLD_END_AT, getEndAt());:		ctx.put(Context.FLD_PREDICATE, getPredicate());$$Line490$		ctx.put(Context.FLD_SITE, getSite());:		ctx.put(Context.FLD_OBJECT, getObject());$$Line491$		ctx.put(Context.FLD_OWNER, getOwner());:		ctx.put(Context.FLD_START_FROM, getStartFrom());$$Line492$		:		ctx.put(Context.FLD_END_AT, getEndAt());$$Line493$		// FLD_ID, FLD_TIMESTAMP, FLD_CONSISTENCY are unnecessary:		ctx.put(Context.FLD_SITE, getSite());$$Line494$		:		ctx.put(Context.FLD_OWNER, getOwner());$$Line495$		ctx.put(Context.FLD_TIMESTAMP, TimeFormat.convert(timestamp));  // Set FLD_TIMESTAMP:		$$Line496$		:		// FLD_ID, FLD_TIMESTAMP, FLD_CONSISTENCY are unnecessary$$Line497$		return ctx;:		$$Line498$	}:		ctx.put(Context.FLD_TIMESTAMP, TimeFormat.convert(timestamp));  // Set FLD_TIMESTAMP$$Line499$	:		$$Line500$	private String getCategory() {:		return ctx;$$Line501$	:	}$$Line502$		return "location";:	$$Line503$	}:	private String getCategory() {$$Line505$	private String getSubject() {:		return "location";$$Line506$		:	}$$Line507$		return "Jialin";:	$$Line508$	}:	private String getSubject() {$$Line509$	:		$$Line510$	private String getPredicate() {:		return "Jialin";$$Line511$		:	}$$Line512$		return "estimated at";:	$$Line513$	}:	private String getPredicate() {$$Line514$	:		$$Line515$	private String getObject() {:		return "estimated at";$$Line516$		:	}$$Line517$		return "" + curEstX + " " + curEstY;  // Estimated location:	$$Line518$	}:	private String getObject() {$$Line519$	:		$$Line520$	private String getStartFrom() {:		return "" + curEstX + " " + curEstY;  // Estimated location$$Line521$		:	}$$Line522$		return TimeFormat.convert(System.currentTimeMillis());:	$$Line523$	}:	private String getStartFrom() {$$Line524$	:		$$Line525$	private String getEndAt() {:		return TimeFormat.convert(System.currentTimeMillis());$$Line526$		:	}$$Line527$		return TimeFormat.convert(System.currentTimeMillis());:	$$Line528$	}:	private String getEndAt() {$$Line529$	:		$$Line530$	private String getSite() {:		return TimeFormat.convert(System.currentTimeMillis());$$Line531$		:	}$$Line532$		return "HKUST";:	$$Line533$	}:	private String getSite() {$$Line534$	:		$$Line535$	private String getOwner() {:		return "HKUST";$$Line536$		:	}$$Line537$		return "" + counter;  // Special purpose, used to decide if two contexts are adjacent or not:	$$Line538$	}:	private String getOwner() {$$Line539$	:		$$Line540$	private boolean filterLocCons2Stay(Context ctx1, Context ctx2) { // filter 1:		return "" + counter;  // Special purpose, used to decide if two contexts are adjacent or not$$Line541$		:	}$$Line542$		int c1 = Integer.parseInt((String) ctx1.get(Context.FLD_OWNER));:	$$Line543$		int c2 = Integer.parseInt((String) ctx2.get(Context.FLD_OWNER));:	private boolean filterLocCons2Stay(Context ctx1, Context ctx2) { // filter 1$$Line544$		long t1 = TimeFormat.convert((String) ctx1.get(Context.FLD_TIMESTAMP));:		$$Line545$		long t2 = TimeFormat.convert((String) ctx2.get(Context.FLD_TIMESTAMP));//System.out.print(" f1:" + t2 + " ");:		int c1 = Integer.parseInt((String) ctx1.get(Context.FLD_OWNER));$$Line546$		if (c1 + 1 == c2 && t2 - t1 <= STAY_TIME + 100) { // Adjacent and in stay:		int c2 = Integer.parseInt((String) ctx2.get(Context.FLD_OWNER));$$Line547$		//	System.out.print(" f1 true ");:		long t1 = TimeFormat.convert((String) ctx1.get(Context.FLD_TIMESTAMP));$$Line548$			return true;:		long t2 = TimeFormat.convert((String) ctx2.get(Context.FLD_TIMESTAMP));//System.out.print(" f1:" + t2 + " ");$$Line549$		} else {:		if (c1 + 1 == c2 && t2 - t1 <= STAY_TIME + 100) { // Adjacent and in stay$$Line550$			return false;:		//	System.out.print(" f1 true ");$$Line551$		}:			return true;$$Line552$	}:		} else {$$Line553$	:			return false;$$Line554$	private boolean filterLocCons2Walk(Context ctx1, Context ctx2) { // filter 2:		}$$Line555$		:	}$$Line556$		int c1 = Integer.parseInt((String) ctx1.get(Context.FLD_OWNER));:	$$Line557$		int c2 = Integer.parseInt((String) ctx2.get(Context.FLD_OWNER));:	private boolean filterLocCons2Walk(Context ctx1, Context ctx2) { // filter 2$$Line558$		long t1 = TimeFormat.convert((String) ctx1.get(Context.FLD_TIMESTAMP));:		$$Line559$		long t2 = TimeFormat.convert((String) ctx2.get(Context.FLD_TIMESTAMP));:		int c1 = Integer.parseInt((String) ctx1.get(Context.FLD_OWNER));$$Line560$		if (c1 + 1 == c2 && t2 - t1 > STAY_TIME + 100) { // Adjacent and in walk:		int c2 = Integer.parseInt((String) ctx2.get(Context.FLD_OWNER));$$Line561$			return true;:		long t1 = TimeFormat.convert((String) ctx1.get(Context.FLD_TIMESTAMP));$$Line562$		} else {:		long t2 = TimeFormat.convert((String) ctx2.get(Context.FLD_TIMESTAMP));$$Line563$			return false;:		if (c1 + 1 == c2 && t2 - t1 > STAY_TIME + 100) { // Adjacent and in walk$$Line564$		}:			return true;$$Line565$	}:		} else {$$Line566$	:			return false;$$Line567$	private boolean filterLocSkip1Stay(Context ctx1, Context ctx2) { // filter 3:		}$$Line568$		:	}$$Line569$		int c1 = Integer.parseInt((String) ctx1.get(Context.FLD_OWNER));:	$$Line570$		int c2 = Integer.parseInt((String) ctx2.get(Context.FLD_OWNER));:	private boolean filterLocSkip1Stay(Context ctx1, Context ctx2) { // filter 3$$Line571$		long t1 = TimeFormat.convert((String) ctx1.get(Context.FLD_TIMESTAMP));:		$$Line572$		long t2 = TimeFormat.convert((String) ctx2.get(Context.FLD_TIMESTAMP));:		int c1 = Integer.parseInt((String) ctx1.get(Context.FLD_OWNER));$$Line573$		if (c1 + 2 == c2 && t2 - t1 <= 2 * (STAY_TIME + 100)) { // Skipping 1 and in stay:		int c2 = Integer.parseInt((String) ctx2.get(Context.FLD_OWNER));$$Line574$			return true;:		long t1 = TimeFormat.convert((String) ctx1.get(Context.FLD_TIMESTAMP));$$Line575$		} else {:		long t2 = TimeFormat.convert((String) ctx2.get(Context.FLD_TIMESTAMP));$$Line576$			return false;:		if (c1 + 2 == c2 && t2 - t1 <= 2 * (STAY_TIME + 100)) { // Skipping 1 and in stay$$Line577$		}:			return true;$$Line578$	}:		} else {$$Line579$	:			return false;$$Line580$	private boolean filterLocSkip1Walk(Context ctx1, Context ctx2) { // filter 4:		}$$Line581$		:	}$$Line582$		int c1 = Integer.parseInt((String) ctx1.get(Context.FLD_OWNER));:	$$Line583$		int c2 = Integer.parseInt((String) ctx2.get(Context.FLD_OWNER));:	private boolean filterLocSkip1Walk(Context ctx1, Context ctx2) { // filter 4$$Line584$		long t1 = TimeFormat.convert((String) ctx1.get(Context.FLD_TIMESTAMP));:		$$Line585$		long t2 = TimeFormat.convert((String) ctx2.get(Context.FLD_TIMESTAMP));:		int c1 = Integer.parseInt((String) ctx1.get(Context.FLD_OWNER));$$Line586$		if (c1 + 2 == c2 && t2 - t1 >= 2 * (long) (WALK_DIST / VELOCITY * 1000)) { // Skipping 1 and in walk:		int c2 = Integer.parseInt((String) ctx2.get(Context.FLD_OWNER));$$Line587$			return true;:		long t1 = TimeFormat.convert((String) ctx1.get(Context.FLD_TIMESTAMP));$$Line588$		} else {:		long t2 = TimeFormat.convert((String) ctx2.get(Context.FLD_TIMESTAMP));$$Line589$			return false;:		if (c1 + 2 == c2 && t2 - t1 >= 2 * (long) (WALK_DIST / VELOCITY * 1000)) { // Skipping 1 and in walk$$Line590$		}:			return true;$$Line591$	}:		} else {$$Line592$	:			return false;$$Line593$	private boolean filterLocSkip1Mix(Context ctx1, Context ctx2) { // filter 5:		}$$Line594$		:	}$$Line595$		int c1 = Integer.parseInt((String) ctx1.get(Context.FLD_OWNER));:	$$Line596$		int c2 = Integer.parseInt((String) ctx2.get(Context.FLD_OWNER));:	private boolean filterLocSkip1Mix(Context ctx1, Context ctx2) { // filter 5$$Line597$		long t1 = TimeFormat.convert((String) ctx1.get(Context.FLD_TIMESTAMP));:		$$Line598$		long t2 = TimeFormat.convert((String) ctx2.get(Context.FLD_TIMESTAMP));:		int c1 = Integer.parseInt((String) ctx1.get(Context.FLD_OWNER));$$Line599$		if (c1 + 2 == c2 && t2 - t1 > 2 * (STAY_TIME + 100) &&:		int c2 = Integer.parseInt((String) ctx2.get(Context.FLD_OWNER));$$Line600$			t2 - t1 < 2 * (long) (WALK_DIST / VELOCITY * 1000)) { // Skipping 1 and in stay and walk:		long t1 = TimeFormat.convert((String) ctx1.get(Context.FLD_TIMESTAMP));$$Line601$			return true;:		long t2 = TimeFormat.convert((String) ctx2.get(Context.FLD_TIMESTAMP));$$Line602$		} else {:		if (c1 + 2 == c2 && t2 - t1 > 2 * (STAY_TIME + 100) &&$$Line603$			return false;:			t2 - t1 < 2 * (long) (WALK_DIST / VELOCITY * 1000)) { // Skipping 1 and in stay and walk$$Line604$		}:			return true;$$Line605$	}:		} else {$$Line606$	:			return false;$$Line607$	private boolean funcLocDistOk(Context ctx1, Context ctx2) { // boolean function 1:		}$$Line608$		:	}$$Line609$		String v1 = (String) ctx1.get(Context.FLD_OBJECT);:	$$Line610$		String v2 = (String) ctx2.get(Context.FLD_OBJECT);:	private boolean funcLocDistOk(Context ctx1, Context ctx2) { // boolean function 1$$Line611$		if (v1 == null || v2 == null) {:		$$Line612$			return false;:		String v1 = (String) ctx1.get(Context.FLD_OBJECT);$$Line613$		}:		String v2 = (String) ctx2.get(Context.FLD_OBJECT);$$Line614$		:		if (v1 == null || v2 == null) {$$Line615$		StringTokenizer st = new StringTokenizer(v1);:			return false;$$Line616$		double x1 = Double.parseDouble(st.nextToken());:		}$$Line617$		double y1 = Double.parseDouble(st.nextToken());:		$$Line618$		st = new StringTokenizer(v2);:		StringTokenizer st = new StringTokenizer(v1);$$Line619$		double x2 = Double.parseDouble(st.nextToken());:		double x1 = Double.parseDouble(st.nextToken());$$Line620$		double y2 = Double.parseDouble(st.nextToken());:		double y1 = Double.parseDouble(st.nextToken());$$Line621$		double dist = Coordinates.calDist(x1, y1, x2, y2);:		st = new StringTokenizer(v2);$$Line622$		:		double x2 = Double.parseDouble(st.nextToken());$$Line623$		// The distance should not be larger than two times the allowed error:		double y2 = Double.parseDouble(st.nextToken());$$Line624$		boolean result = false;:		double dist = Coordinates.calDist(x1, y1, x2, y2);$$Line625$		if (dist <= 2 * ERR) {:		$$Line626$			result = true;:		// The distance should not be larger than two times the allowed error$$Line627$		}:		boolean result = false;$$Line628$		:		if (dist <= 2 * ERR) {$$Line629$		return result;:			result = true;$$Line630$	}:		}$$Line631$	:		$$Line632$	private boolean funcLocWalkAdjVeloOk(Context ctx1, Context ctx2) { // boolean function 2:		return result;$$Line633$		:	}$$Line634$		String v1 = (String) ctx1.get(Context.FLD_OBJECT);:	$$Line635$		String v2 = (String) ctx1.get(Context.FLD_TIMESTAMP);:	private boolean funcLocWalkAdjVeloOk(Context ctx1, Context ctx2) { // boolean function 2$$Line636$		String v3 = (String) ctx2.get(Context.FLD_OBJECT);:		$$Line637$		String v4 = (String) ctx2.get(Context.FLD_TIMESTAMP);:		String v1 = (String) ctx1.get(Context.FLD_OBJECT);$$Line638$		if (v1 == null || v2 == null || v3 == null || v4 == null) {:		String v2 = (String) ctx1.get(Context.FLD_TIMESTAMP);$$Line639$			return false;:		String v3 = (String) ctx2.get(Context.FLD_OBJECT);$$Line640$		}:		String v4 = (String) ctx2.get(Context.FLD_TIMESTAMP);$$Line641$		:		if (v1 == null || v2 == null || v3 == null || v4 == null) {$$Line642$		StringTokenizer st = new StringTokenizer(v1);:			return false;$$Line643$		double x1 = Double.parseDouble(st.nextToken());:		}$$Line644$		double y1 = Double.parseDouble(st.nextToken());:		$$Line645$		st = new StringTokenizer(v3);:		StringTokenizer st = new StringTokenizer(v1);$$Line646$		double x2 = Double.parseDouble(st.nextToken());:		double x1 = Double.parseDouble(st.nextToken());$$Line647$		double y2 = Double.parseDouble(st.nextToken());:		double y1 = Double.parseDouble(st.nextToken());$$Line648$		double dist = Coordinates.calDist(x1, y1, x2, y2);:		st = new StringTokenizer(v3);$$Line649$		long t = TimeFormat.convert(v4) - TimeFormat.convert(v2);:		double x2 = Double.parseDouble(st.nextToken());$$Line650$		:		double y2 = Double.parseDouble(st.nextToken());$$Line651$		// The velocity should be between vmin and vmax:		double dist = Coordinates.calDist(x1, y1, x2, y2);$$Line652$		boolean result = false;:		long t = TimeFormat.convert(v4) - TimeFormat.convert(v2);$$Line653$		double vmin = (VELOCITY * ((double) t / 1000) - 2 * ERR) / ((double) t / 1000);:		$$Line654$		double vmax = (VELOCITY * ((double) t / 1000) + 2 * ERR) / ((double) t / 1000);:		// The velocity should be between vmin and vmax$$Line655$		double ve = dist / ((double) t / 1000);:		boolean result = false;$$Line656$		if (ve >= vmin && ve <= vmax) {:		double vmin = (VELOCITY * ((double) t / 1000) - 2 * ERR) / ((double) t / 1000);$$Line657$			result = true;:		double vmax = (VELOCITY * ((double) t / 1000) + 2 * ERR) / ((double) t / 1000);$$Line658$		}:		double ve = dist / ((double) t / 1000);$$Line659$		:		if (ve >= vmin && ve <= vmax) {$$Line660$		return result;:			result = true;$$Line661$	}:		}$$Line662$	:		$$Line663$	private boolean funcLocWalkSkipVeloOk(Context ctx1, Context ctx2) { // boolean function 3:		return result;$$Line664$		:	}$$Line665$		String v1 = (String) ctx1.get(Context.FLD_OBJECT);:	$$Line666$		String v2 = (String) ctx1.get(Context.FLD_TIMESTAMP);:	private boolean funcLocWalkSkipVeloOk(Context ctx1, Context ctx2) { // boolean function 3$$Line667$		String v3 = (String) ctx2.get(Context.FLD_OBJECT);:		$$Line668$		String v4 = (String) ctx2.get(Context.FLD_TIMESTAMP);:		String v1 = (String) ctx1.get(Context.FLD_OBJECT);$$Line669$		if (v1 == null || v2 == null || v3 == null || v4 == null) {:		String v2 = (String) ctx1.get(Context.FLD_TIMESTAMP);$$Line670$			return false;:		String v3 = (String) ctx2.get(Context.FLD_OBJECT);$$Line671$		}:		String v4 = (String) ctx2.get(Context.FLD_TIMESTAMP);$$Line672$		:		if (v1 == null || v2 == null || v3 == null || v4 == null) {$$Line673$		StringTokenizer st = new StringTokenizer(v1);:			return false;$$Line674$		double x1 = Double.parseDouble(st.nextToken());:		}$$Line675$		double y1 = Double.parseDouble(st.nextToken());:		$$Line676$		st = new StringTokenizer(v3);:		StringTokenizer st = new StringTokenizer(v1);$$Line677$		double x2 = Double.parseDouble(st.nextToken());:		double x1 = Double.parseDouble(st.nextToken());$$Line678$		double y2 = Double.parseDouble(st.nextToken());:		double y1 = Double.parseDouble(st.nextToken());$$Line679$		double dist = Coordinates.calDist(x1, y1, x2, y2);:		st = new StringTokenizer(v3);$$Line680$		long t = TimeFormat.convert(v4) - TimeFormat.convert(v2);:		double x2 = Double.parseDouble(st.nextToken());$$Line681$		:		double y2 = Double.parseDouble(st.nextToken());$$Line682$		// The velocity should be less than vmax:		double dist = Coordinates.calDist(x1, y1, x2, y2);$$Line683$		boolean result = false;:		long t = TimeFormat.convert(v4) - TimeFormat.convert(v2);$$Line684$		double vmax = (VELOCITY * ((double) t / 1000) + 2 * ERR) / ((double) t / 1000);:		$$Line685$		double ve = dist / ((double) t / 1000);:		// The velocity should be less than vmax$$Line686$		if (ve <= vmax) {:		boolean result = false;$$Line687$			result = true;:		double vmax = (VELOCITY * ((double) t / 1000) + 2 * ERR) / ((double) t / 1000);$$Line688$		}:		double ve = dist / ((double) t / 1000);$$Line689$		:		if (ve <= vmax) {$$Line690$		return result;:			result = true;$$Line691$	}:		}$$Line692$	:		$$Line693$	private boolean funcLocMixVeloOk(Context ctx1, Context ctx2) { // boolean function 4:		return result;$$Line694$		:	}$$Line695$		String v1 = (String) ctx1.get(Context.FLD_OBJECT);:	$$Line696$		String v2 = (String) ctx1.get(Context.FLD_TIMESTAMP);:	private boolean funcLocMixVeloOk(Context ctx1, Context ctx2) { // boolean function 4$$Line697$		String v3 = (String) ctx2.get(Context.FLD_OBJECT);:		$$Line698$		String v4 = (String) ctx2.get(Context.FLD_TIMESTAMP);:		String v1 = (String) ctx1.get(Context.FLD_OBJECT);$$Line699$		if (v1 == null || v2 == null || v3 == null || v4 == null) {:		String v2 = (String) ctx1.get(Context.FLD_TIMESTAMP);$$Line700$			return false;:		String v3 = (String) ctx2.get(Context.FLD_OBJECT);$$Line701$		}:		String v4 = (String) ctx2.get(Context.FLD_TIMESTAMP);$$Line702$		:		if (v1 == null || v2 == null || v3 == null || v4 == null) {$$Line703$		StringTokenizer st = new StringTokenizer(v1);:			return false;$$Line704$		double x1 = Double.parseDouble(st.nextToken());:		}$$Line705$		double y1 = Double.parseDouble(st.nextToken());:		$$Line706$		st = new StringTokenizer(v3);:		StringTokenizer st = new StringTokenizer(v1);$$Line707$		double x2 = Double.parseDouble(st.nextToken());:		double x1 = Double.parseDouble(st.nextToken());$$Line708$		double y2 = Double.parseDouble(st.nextToken());:		double y1 = Double.parseDouble(st.nextToken());$$Line709$		double dist = Coordinates.calDist(x1, y1, x2, y2);:		st = new StringTokenizer(v3);$$Line710$		long t = TimeFormat.convert(v4) - TimeFormat.convert(v2) - STAY_TIME; // Different here:		double x2 = Double.parseDouble(st.nextToken());$$Line711$		:		double y2 = Double.parseDouble(st.nextToken());$$Line712$		// The velocity should be between vmin and vmax:		double dist = Coordinates.calDist(x1, y1, x2, y2);$$Line713$		boolean result = false;:		long t = TimeFormat.convert(v4) - TimeFormat.convert(v2) - STAY_TIME; // Different here$$Line714$		double vmin = (VELOCITY * ((double) t / 1000) - 2 * ERR) / ((double) t / 1000);:		$$Line715$		double vmax = (VELOCITY * ((double) t / 1000) + 2 * ERR) / ((double) t / 1000);:		// The velocity should be between vmin and vmax$$Line716$		double ve = dist / ((double) t / 1000);:		boolean result = false;$$Line717$		if (ve >= vmin && ve <= vmax) {:		double vmin = (VELOCITY * ((double) t / 1000) - 2 * ERR) / ((double) t / 1000);$$Line718$			result = true;:		double vmax = (VELOCITY * ((double) t / 1000) + 2 * ERR) / ((double) t / 1000);$$Line719$		}:		double ve = dist / ((double) t / 1000);$$Line720$		:		if (ve >= vmin && ve <= vmax) {$$Line721$		return result;:			result = true;$$Line722$	}:		}$$Line723$	:		$$Line724$	private int toBoolean(double d) {:		return result;$$Line725$		:	}$$Line726$		int result = 0;:	$$Line727$		if (d != (double) 0) {:	private int toBoolean(double d) {$$Line728$			result = 1;:		$$Line729$		}:		int result = 0;$$Line730$		return result;:		if (d != (double) 0) {$$Line731$	}:			result = 1;$$Line732$	:		}$$Line733$	private Coordinates toCoordinates(Context ctx) {:		return result;$$Line734$		:	}$$Line735$		StringTokenizer st = new StringTokenizer((String) ctx.get(Context.FLD_OBJECT));:	$$Line736$		double x = Double.parseDouble(st.nextToken());:	private Coordinates toCoordinates(Context ctx) {$$Line737$		double y = Double.parseDouble(st.nextToken());:		$$Line738$		return new Coordinates(x, y);:		StringTokenizer st = new StringTokenizer((String) ctx.get(Context.FLD_OBJECT));$$Line739$	}:		double x = Double.parseDouble(st.nextToken());$$Line740$:		double y = Double.parseDouble(st.nextToken());$$Line741$	protected void resolve() {:		return new Coordinates(x, y);$$Line742$		:	}$$Line743$		boolean consistent = true;:$$Line744$		for (int i = 0; i < queue.size() && i < 10; i++) {:	protected void resolve() {$$Line745$			Context ctx = (Context) queue.get(i);:		$$Line746$			if (filterLocCons2Stay(ctx, candidate) && !funcLocDistOk(ctx, candidate)) {:		boolean consistent = true;$$Line747$				// Policy Context[candidate] Constraint[constraint0 on candidate] Solution[discard]:		for (int i = 0; i < queue.size() && i < 10; i++) {$$Line748$				consistent = false;:			Context ctx = (Context) queue.get(i);$$Line749$				break;:			if (filterLocCons2Stay(ctx, candidate) && !funcLocDistOk(ctx, candidate)) {$$Line750$			}:				// Policy Context[candidate] Constraint[constraint0 on candidate] Solution[discard]$$Line751$			if (filterLocCons2Walk(ctx, candidate) && !funcLocWalkAdjVeloOk(ctx, candidate)) {:				consistent = false;$$Line752$				// Policy Context[candidate] Constraint[constraint1 on candidate] Solution[discard]:				break;$$Line753$				consistent = false;:			}$$Line754$				break;:			if (filterLocCons2Walk(ctx, candidate) && !funcLocWalkAdjVeloOk(ctx, candidate)) {$$Line755$			}:				// Policy Context[candidate] Constraint[constraint1 on candidate] Solution[discard]$$Line756$			if (filterLocSkip1Stay(ctx, candidate) && !funcLocDistOk(ctx, candidate)) {:				consistent = false;$$Line757$				// Policy Context[candidate] Constraint[constraint2 on candidate] Solution[discard]:				break;$$Line758$				consistent = false;:			}$$Line759$				break;:			if (filterLocSkip1Stay(ctx, candidate) && !funcLocDistOk(ctx, candidate)) {$$Line760$			}:				// Policy Context[candidate] Constraint[constraint2 on candidate] Solution[discard]$$Line761$			if (filterLocSkip1Walk(ctx, candidate) && !funcLocWalkSkipVeloOk(ctx, candidate)) {:				consistent = false;$$Line762$				// Policy Context[candidate] Constraint[constraint3 on candidate] Solution[discard]:				break;$$Line763$				consistent = false;:			}$$Line764$				break;:			if (filterLocSkip1Walk(ctx, candidate) && !funcLocWalkSkipVeloOk(ctx, candidate)) {$$Line765$			}:				// Policy Context[candidate] Constraint[constraint3 on candidate] Solution[discard]$$Line766$			if (filterLocSkip1Mix(ctx, candidate) && !funcLocMixVeloOk(ctx, candidate)) {:				consistent = false;$$Line767$				// Policy Context[candidate] Constraint[constraint4 on candidate] Solution[discard]:				break;$$Line768$				consistent = false;:			}$$Line769$				break;:			if (filterLocSkip1Mix(ctx, candidate) && !funcLocMixVeloOk(ctx, candidate)) {$$Line770$			}:				// Policy Context[candidate] Constraint[constraint4 on candidate] Solution[discard]$$Line771$		}:				consistent = false;$$Line772$		if (consistent) {:				break;$$Line773$			// Context definition:			}$$Line774$			queue.add(0, candidate);:		}$$Line775$		} else {:		if (consistent) {$$Line776$			candidate = (Context) queue.get(0);:			// Context definition$$Line777$		}:			queue.add(0, candidate);$$Line778$	//	System.out.println(candidate.get(Context.FLD_OWNER) + ":\t" + candidate.get(Context.FLD_OBJECT));:		} else {$$Line779$	}:			candidate = (Context) queue.get(0);$$Line780$	:		}$$Line781$	public static void main(String argv[]) {:	//	System.out.println(candidate.get(Context.FLD_OWNER) + ":\t" + candidate.get(Context.FLD_OBJECT));$$Line782$		:	}$$Line783$		String testcase = "10"; :	$$Line784$		System.out.println("result = " + (new TestCFG2()).application(testcase));:	public static void main(String argv[]) {$$Line785$	//	System.out.println((new TestCFG2()).application(testcase).equals((new TestCFG2()).application(testcase)));:		$$Line786$	}:		String testcase = "10"; $$Line787$:		System.out.println("result = " + (new TestCFG2()).application(testcase));$$Line788$}:	//	System.out.println((new TestCFG2()).application(testcase).equals((new TestCFG2()).application(testcase)));$529$
TestCFG2_85.java$$Line340$			displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + :			displace = Math.sqrt((location.x - lastLocation./*x*/y) * (location.x - lastLocation./*x*/y) +  // Seeded fault$$Line345$			if (error <= ERR) {:			if (error <= /*ERR*/ERR + 0.2) { // Seeded fault$2$
TestCFG2_86.java$$Line342$			moved = moved + toBoolean(displace);:			moved = moved + /*toBoolean(displace)*/1;$$Line346$				reliable = reliable + 1;:				reliable = reliable + /*1*/2; // Seeded fault$2$
TestCFG2_87.java$$Line379$		moved = moved + toBoolean(displace);:	//	moved = moved + toBoolean(displace); // Seeded fault$$Line407$				reliable = reliable + 1;:			//	reliable = reliable + 1; // Seeded fault$2$
TestCFG2_88.java$$Line462$			displace = Math.sqrt((location.x - lastLocation.x) * (location.x - lastLocation.x) + :			displace = Math.sqrt((location.x /*-*/+ lastLocation.x) * (location.x /*-*/+ lastLocation.x) +  // Seeded fault$$Line465$			error = Math.sqrt((actLoc.x - location.x) * (actLoc.x - location.x) + :			error = Math.sqrt((actLoc.x /*-*/+ location.x) * (actLoc.x /*-*/+ location.x) +  // Seeded fault$2$
TestCFG2_89.java$$Line464$			moved = moved + toBoolean(displace);:			reliable/*moved*/ = moved + toBoolean(displace); // Seeded fault$$Line468$				reliable = reliable + 1;:				moved/*reliable*/ = reliable + 1; // Seeded fault$2$
TestCFG2_90.java$$Line150$			timestamp = timestamp + t;:		//	timestamp = timestamp + t; // Seeded fault$1$
TestCFG2_91.java$$Line186$		dist = Coordinates.calDist(lastLoc, actLoc);:		dist = Coordinates.calDist(lastLoc, /*actLoc*/estLoc); // Seeded fault$1$
TestCFG2_92.java$$Line188$		timestamp = timestamp + t;:		timestamp = timestamp + /*t*/t * 2; // Seeded fault$1$
TestCFG2_93.java$$Line247$		dist = Coordinates.calDist(lastLoc, actLoc);:		dist = Coordinates.calDist(/*lastLoc*/estLoc, actLoc); // Seeded fault$1$
TestCFG2_94.java$$Line273$			timestamp = timestamp + t;:		//	timestamp = timestamp + t; // Seeded fault$1$
TestCFG2_95.java$$Line308$		dist = Coordinates.calDist(lastLoc, actLoc);:	//	dist = Coordinates.calDist(lastLoc, actLoc); // Seeded fault$1$
TestCFG2_96.java$$Line308$		dist = Coordinates.calDist(lastLoc, actLoc);:		dist = Coordinates.calDist(lastLoc, /*actLoc*/estLoc); // Seeded fault$1$
TestCFG2_97.java$$Line370$		t = (long) (dist / VELOCITY * 1000); // Experimentation: Estimated time required from lastLoc to actLoc:		t = (long) (dist / /*VELOCITY*/(VELOCITY - 1.0) * 1000); // Seeded fault // Experimentation: Estimated time required from lastLoc to actLoc$1$
TestCFG2_98.java$$Line431$		t = (long) (dist / VELOCITY * 1000); // Experimentation: Estimated time required from lastLoc to actLoc:		t = (long) (dist /*/ VELOCITY*/ * 1000); // Seeded fault // Experimentation: Estimated time required from lastLoc to actLoc$1$
TestCFG2_99.java$$Line431$		t = (long) (dist / VELOCITY * 1000); // Experimentation: Estimated time required from lastLoc to actLoc:		t = (long) (dist / /*VELOCITY*/1.0 * 1000); // Seeded fault // Experimentation: Estimated time required from lastLoc to actLoc$1$
